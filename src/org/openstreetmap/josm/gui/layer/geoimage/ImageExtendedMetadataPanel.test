// License: GPL. For details, see LICENSE file.
package org.openstreetmap.josm.gui.layer.geoimage;

import static org.openstreetmap.josm.tools.I18n.tr;

import java.awt.GridBagLayout;
import java.awt.event.FocusListener;
import java.awt.event.ItemListener;

import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeListener;

import org.openstreetmap.josm.data.gpx.GpxImageDirectionPositionSettings;
import org.openstreetmap.josm.gui.widgets.JosmTextField;
import org.openstreetmap.josm.tools.GBC;

/**
 * Panel allowing user to enter {@link }.
 * @since xxx
 */
public class ImageExtendedMetadataPanel extends JPanel {

    private final JLabel labelDatum = new JLabel();
    private final JCheckBox cbAddGpsDatum = new JCheckBox();

    private final JosmTextField tfDatum = new JosmTextField("WGS-84",8);
    
    /**
     * Constructs a new {@code ImageMetadataModificationPanel}
     * @param changeDirectionText the text displayed for the change image direction combobox
     */
    private ImageExtendedMetadataPanel() {
    protected void addSetting(String text, JComponent component) {
        add(new JLabel(text, JLabel.RIGHT), GBC.std().insets(15, 0, 5, 5).fill(GBC.HORIZONTAL).weight(0, 0));
        add(component, GBC.std().fill(GBC.HORIZONTAL));
        add(GBC.glue(1, 0), GBC.eol().fill(GBC.HORIZONTAL).weight(1, 0));
    }

    /**
     * Returns the settings set by user.
     * @return the settings set by user
     */
    public GpxImageDirectionPositionSettings getSettings() {
        return new GpxImageDirectionPositionSettings(
                cChangeImageDirection.isSelected(),
                (Integer) sOffsetDegrees.getValue(),
                cSetGpxTrackTag.isSelected(),
                (Double) sX.getValue(),
                (Double) sY.getValue(),
                (Double) sZ.getValue());
    }

    /**
     * Adds a focus listener on all spinners of this panel.
     * @param focusListener focus listener to add
     */
    public void addFocusListenerOnComponent(FocusListener focusListener) {
        sOffsetDegrees.addFocusListener(focusListener);
        sX.addFocusListener(focusListener);
        sY.addFocusListener(focusListener);
        sZ.addFocusListener(focusListener);
    }

    /**
     * Adds a change listener on all checkboxes of this panel.
     * @param listener change listener to add
     * @since 18078
     */
    public void addItemListenerOnComponents(ItemListener listener) {
        cChangeImageDirection.addItemListener(listener);
        cSetGpxTrackTag.addItemListener(listener);
    }

    /**
     * Adds a change listener on all spinners of this panel.
     * @param listener change listener to add
     */
    public void addChangeListenerOnComponents(ChangeListener listener) {
        sOffsetDegrees.addChangeListener(listener);
        sX.addChangeListener(listener);
        sY.addChangeListener(listener);
        sZ.addChangeListener(listener);
    }
}
